import{u as H}from"./CohortsStore-f75aebeb.js";import{_ as w,o as l,c as _,f as B,r as f,a as m,t as b,k as A,b as y}from"./main-6e31f071.js";import{s as u}from"./transform-35b9fb9e.js";import{l as k,m as x,b as S,s as C}from"./linear-cecdee01.js";import{a as $,b as Q}from"./continuous-03958144.js";import{F as T}from"./FailedAssessmentsHorizontalBarChart-8c57ad3a.js";const j={name:"CohortPassedAssessmentsHorizontalBarChart",props:["data","colour"],data(){return{padding:60}},mounted(){u("#cohort-passed-assessments-chart-container");const t=25,e=0,h=0,d=10,r=200,n=1e3,i=Math.ceil((this.data.length+.1)*t)+e+d,a=k().domain([0,x(this.data,s=>s.quantity)]).range([r,n-h]),o=S().domain(C(this.data,s=>-s.quantity).map(s=>s.name)).rangeRound([e,i-d]).padding(.1),p=a.tickFormat(20),c=u("#cohort-passed-assessments-chart-container").append("svg").attr("width",n).attr("height",i).attr("viewBox",[0,0,n,i]).attr("style","max-width: 100%; height: 100%; font: 14px sans-serif;");c.append("g").attr("fill",this.colour).selectAll().data(this.data).join("rect").attr("x",a(0)).attr("y",s=>o(s.name)).attr("width",s=>a(s.quantity)-a(0)).attr("height",o.bandwidth()),c.append("g").attr("fill","white").attr("text-anchor","end").selectAll().data(this.data).join("text").attr("x",s=>a(s.quantity)).attr("y",s=>o(s.name)+o.bandwidth()/2).attr("dy","0.35em").attr("dx",-4).text(s=>p(s.quantity)).call(s=>s.filter(g=>a(g.quantity)-a(0)<20).attr("dx",4).attr("fill","black").attr("text-anchor","start")),c.append("g").attr("transform",`translate(0,${e})`).call($(a).ticks(0)).call(s=>s.select(".domain").remove()),c.append("g").attr("transform",`translate(${r},0)`).call(Q(o).tickSizeOuter(0))},computed:{}},z={id:"cohort-passed-assessments-chart-container"};function E(t,e,h,d,r,n){return l(),_("div",z)}const q=w(j,[["render",E]]),v={name:"CohortAttemptedAssessmentsHorizontalBarChart",props:["data","colour"],data(){return{padding:60}},mounted(){u("#cohort-attempted-assessments-chart-container");const t=25,e=0,h=0,d=10,r=200,n=1e3,i=Math.ceil((this.data.length+.1)*t)+e+d,a=k().domain([0,x(this.data,s=>s.quantity)]).range([r,n-h]),o=S().domain(C(this.data,s=>-s.quantity).map(s=>s.name)).rangeRound([e,i-d]).padding(.1),p=a.tickFormat(20),c=u("#cohort-attempted-assessments-chart-container").append("svg").attr("width",n).attr("height",i).attr("viewBox",[0,0,n,i]).attr("style","max-width: 100%; height: 100%; font: 14px sans-serif;");c.append("g").attr("fill",this.colour).selectAll().data(this.data).join("rect").attr("x",a(0)).attr("y",s=>o(s.name)).attr("width",s=>a(s.quantity)-a(0)).attr("height",o.bandwidth()),c.append("g").attr("fill","white").attr("text-anchor","end").selectAll().data(this.data).join("text").attr("x",s=>a(s.quantity)).attr("y",s=>o(s.name)+o.bandwidth()/2).attr("dy","0.35em").attr("dx",-4).text(s=>p(s.quantity)).call(s=>s.filter(g=>a(g.quantity)-a(0)<20).attr("dx",4).attr("fill","black").attr("text-anchor","start")),c.append("g").attr("transform",`translate(0,${e})`).call($(a).ticks(0)).call(s=>s.select(".domain").remove()),c.append("g").attr("transform",`translate(${r},0)`).call(Q(o).tickSizeOuter(0))},computed:{}},D={id:"cohort-attempted-assessments-chart-container"};function F(t,e,h,d,r,n){return l(),_("div",D)}const I=w(v,[["render",F]]),P={setup(){const t=H(),e=B();return{cohortsStore:t,userDetailsStore:e}},components:{CohortPassedAssessmentsHorizontalBarChart:q,CohortAttemptedAssessmentsHorizontalChart:I,FailedAssessmentsHorizontalBarChart:T},data(){return{cohortId:this.$route.params.cohortId,cohortName:"",masteredSkillQuantities:[],failedAssessmentQuantities:[],attemptedAssessmentQuantities:[]}},async created(){if(this.cohortId!="all-students"){this.getCohortMasteredAssessments(),this.getCohortAttemptedAssessments(),this.getCohortFailedAssessments(),this.cohortsStore.cohorts.length<1&&await this.cohortsStore.getCohorts(this.userDetailsStore.userId);const t=this.cohortsStore.cohorts.find(e=>e.id==this.cohortId);t&&(this.cohortName=t.name)}else this.getAllStudentsMasteredAssessments(),this.getAllStudentsAttemptedAssessments(),this.getAllStudentsFailedAssessments()},methods:{async getCohortMasteredAssessments(){try{const t=await fetch(`/student-analytics/mastered-skills/cohort/${this.cohortId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();this.masteredSkillQuantities=Array.isArray(e)?e:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.masteredSkillQuantities=[]}},async getAllStudentsMasteredAssessments(){try{const t=await fetch(`/student-analytics/mastered-skills/all-students/${this.userDetailsStore.userId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();this.masteredSkillQuantities=Array.isArray(e)?e:[]}catch(t){console.error("Error fetching all students mastered assessments:",t),this.masteredSkillQuantities=[]}},async getCohortAttemptedAssessments(){try{const t=await fetch(`/student-analytics/attempted-assessments/cohort/${this.cohortId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();this.attemptedAssessmentQuantities=Array.isArray(e)?e:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.attemptedAssessmentQuantities=[]}},async getAllStudentsAttemptedAssessments(){try{const t=await fetch(`/student-analytics/attempted-assessments/all-students/${this.userDetailsStore.userId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();this.attemptedAssessmentQuantities=Array.isArray(e)?e:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.attemptedAssessmentQuantities=[]}},async getCohortFailedAssessments(){try{const t=await fetch(`/student-analytics/failed-assessments/cohort/${this.cohortId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();this.failedAssessmentQuantities=Array.isArray(e)?e:[]}catch(t){console.error("Error fetching cohort failed assessments:",t),this.failedAssessmentQuantities=[]}},async getAllStudentsFailedAssessments(){try{const t=await fetch(`/student-analytics/failed-assessments/all-students/${this.userDetailsStore.userId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();this.failedAssessmentQuantities=Array.isArray(e)?e:[]}catch(t){console.error("Error fetching all students failed assessments:",t),this.failedAssessmentQuantities=[]}},assessmentDate(t){return new Date(t).toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}}},M={class:"container"},R={class:"d-flex justify-content-between w-100"},N=m("h1",{class:"heading"},"Assessment Status Report",-1),L={class:"secondary-heading h3"},O=m("h2",{class:"secondary-heading"},"Passed",-1),V=m("h2",{class:"secondary-heading"},"Attempted",-1),U=m("h2",{class:"secondary-heading"},"Failed multiple times",-1);function G(t,e,h,d,r,n){const i=f("CohortPassedAssessmentsHorizontalBarChart"),a=f("CohortAttemptedAssessmentsHorizontalChart"),o=f("FailedAssessmentsHorizontalBarChart");return l(),_("div",M,[m("span",R,[N,m("h2",L,b(r.cohortName),1)]),O,r.masteredSkillQuantities.length>0?(l(),A(i,{key:0,data:r.masteredSkillQuantities,colour:"darkgreen"},null,8,["data"])):y("",!0),V,r.attemptedAssessmentQuantities.length>0?(l(),A(a,{key:1,data:r.attemptedAssessmentQuantities,colour:"darkblue"},null,8,["data"])):y("",!0),U,r.failedAssessmentQuantities.length>0?(l(),A(o,{key:2,data:r.failedAssessmentQuantities,colour:"darkred"},null,8,["data"])):y("",!0)])}const tt=w(P,[["render",G]]);export{tt as default};
