import{x as o,K as a}from"./main-c940865b.js";const c=o("analytics",{state:()=>({durationPerDay:[],avgTimeOnSkills:[],percentageStudentsMasteredOneSkill:[],tenantProgress:[],numSkillsPassedPerNumStudents:[],passedAssessments:[],failedAssessments:[],rootSubjectsFailedAssessments:[],rootSubjectsPassedAssessments:[],rootSubjectsAttemptedAssessments:[],attemptedAssessments:[],avgTokensToMasterSkills:[],totalTokensPerSkill:[],totalTokensPerDay:[],progress:{student:[],tenant:[]},time:{student:[],tenant:[]},studentDurationsPerDay:[],studentSkillDurations:[],studentTokensPerSkills:[],studentAssessmentPasses:[],studentAssessmentAttempts:[],studentRootSubjectsFailedAssessments:[],studentRootSubjectsPassedAssessments:[],studentRootSubjectsAttemptedAssessments:[],cohortSkillActivities:[],cohortRootSubjectsFailedAssessments:[],cohortRootSubjectsPassedAssessments:[],cohortRootSubjectsAttemptedAssessments:[]}),actions:{async getStudentProgress(r,t){await fetch(`/student-analytics/student-progress/${t}/${r}`).then(s=>s.json()).then(s=>{for(let e=0;e<s.studentProgress.length;e++)s.studentProgress[e].date=new Date(s.studentProgress[e].date);s.studentProgress.sort((e,n)=>e.date-n.date),this.progress.student=s.studentProgress;for(let e=0;e<s.tenantAvgProgress.length;e++)s.tenantAvgProgress[e].date=new Date(s.tenantAvgProgress[e].date);s.tenantAvgProgress.sort((e,n)=>e.date-n.date),this.progress.tenant=s.tenantAvgProgress}).catch(s=>{console.error("Error fetching student progress:",s)})},async getStudentTime(r,t){await fetch(`/student-analytics/student-duration-per-day/${r}/${t}`).then(s=>s.json()).then(s=>{for(let e=0;e<s.studentTime.length;e++)s.studentTime[e].formattedQuantity=s.studentTime[e].quantity/(1e3*60),s.studentTime[e].date=new Date(s.studentTime[e].date);s.studentTime.sort((e,n)=>e.date-n.date),this.time.student=s.studentTime;for(let e=0;e<s.averageTime.length;e++)s.averageTime[e].formattedQuantity=s.averageTime[e].quantity/(1e3*60),s.averageTime[e].date=new Date(s.averageTime[e].date);s.averageTime.sort((e,n)=>e.date-n.date),this.time.tenant=s.averageTime}).catch(s=>{console.error("Error fetching student duration per day:",s)})},async getStudentDurationPerDay(r){fetch(`/student-analytics/student-duration-per-day/${r}}`).then(t=>t.json()).then(t=>{for(let s=0;s<t.length;s++)t[s].formattedQuantity=t[s].quantity/1e3,t[s].date=new Date(t[s].date);t.sort((s,e)=>s.date-e.date),this.studentDurationsPerDay=t}).catch(t=>{console.error("Error fetching student duration per day:",t)})},async getStudentSkillDurations(r){fetch(`/student-analytics/skill-durations/${r}`).then(t=>t.json()).then(t=>{this.studentSkillDurations=t;for(let s=0;s<this.studentSkillDurations.length;s++)this.studentSkillDurations[s].formattedQuantity=this.millisToMinutesAndSeconds(this.studentSkillDurations[s].quantity)}).catch(t=>{console.error("Error fetching last visited skills:",t)})},async getAvgTokensToMasterSkills(r){try{const t=await fetch(`/student-analytics/avg-tokens-to-master-skills/student/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.studentTokensPerSkills=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.studentTokensPerSkills=[]}},async getStudentAssessmentPasses(r){const t=a();await t.getMasteredSkills(r),this.studentAssessmentPasses=t.masteredSkills.map(s=>({...s,url:`/skills/${s.url}`,labelName:`${s.name}`}))},async getStudentAssessmentAttempts(r){fetch(`/student-analytics/started-unmastered-assessments/${r}`).then(t=>t.json()).then(t=>{this.studentAssessmentAttempts=t.map(s=>({...s,url:`/skills/${s.url}`,labelName:`${s.name}`}))}).catch(t=>{console.error("Error fetching last visited skills:",t)})},async getStudentFailedAssessmentsBySubject(r){try{const t=await fetch(`/student-analytics/failed-assessments-by-subject/student/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.studentRootSubjectsFailedAssessments=await t.json()}catch(t){console.error("Error fetching student mastered assessments:",t),this.studentRootSubjectsFailedAssessments=[]}},async getStudentPassedAssessmentsBySubject(r){try{const t=await fetch(`/student-analytics/passed-assessments-by-subject/student/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.studentRootSubjectsPassedAssessments=await t.json()}catch(t){console.error("Error fetching student mastered assessments:",t),this.studentRootSubjectsPassedAssessments=[]}},async getStudentAttemptedAssessmentsBySubject(r){try{const t=await fetch(`/student-analytics/attempted-assessments-by-subject/student/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.studentRootSubjectsAttemptedAssessments=await t.json()}catch(t){console.error("Error fetching student mastered assessments:",t),this.studentRootSubjectsAttemptedAssessments=[]}},async getTeacherClassSkillActivityReport(r){try{const t=await fetch(`/student-analytics/all-student-cohort-activity/instructor/${r}`);if(!t.ok)throw new Error("Network response was not ok");this.cohortSkillActivities=await t.json(),this.cohortSkillActivities=this.cohortSkillActivities.map(s=>({...s,formattedQuantity:this.millisToMinutesAndSeconds(s.quantity)}))}catch(t){console.error("Error fetching skill activity report:",t)}},async getTeacherClassFailedAssessmentsBySubject(r){try{const t=await fetch(`/student-analytics/failed-assessments-by-subject/instructor/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.cohortRootSubjectsFailedAssessments=await t.json()}catch(t){console.error("Error fetching student mastered assessments:",t),this.cohortRootSubjectsFailedAssessments=[]}},async getTeacherClassPassedAssessmentsBySubject(r){try{const t=await fetch(`/student-analytics/passed-assessments-by-subject/instructor/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.cohortRootSubjectsPassedAssessments=await t.json()}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.cohortRootSubjectsPassedAssessments=[]}},async getTeacherClassAttemptedAssessmentsBySubject(r){try{const t=await fetch(`/student-analytics/attempted-assessments-by-subject/instructor/${r}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.cohortRootSubjectsAttemptedAssessments=await t.json()}catch(t){console.error("Error fetching cohort attempted assessments:",t),this.cohortRootSubjectsAttemptedAssessments=[]}},async getSchoolProgress(r){await fetch(`/student-analytics/school-progress/${r}`).then(t=>t.json()).then(t=>{for(let s=0;s<t.length;s++)t[s].date=new Date(t[s].date);t.sort((s,e)=>s.date-e.date),this.progress.tenant=t}).catch(t=>{console.error("Error fetching student progress:",t)})},millisToMinutesAndSeconds(r){var t=Math.floor(r/6e4),s=(r%6e4/1e3).toFixed(0);return t+":"+(s<10?"0":"")+s}}});export{c as u};
