import{x as o,K as a}from"./main-f9b7cdb5.js";const c=o("analytics",{state:()=>({durationPerDay:[],avgTimeOnSkills:[],percentageStudentsMasteredOneSkill:[],tenantProgress:[],numSkillsPassedPerNumStudents:[],passedAssessments:[],failedAssessments:[],rootSubjectsFailedAssessments:[],rootSubjectsPassedAssessments:[],rootSubjectsAttemptedAssessments:[],attemptedAssessments:[],avgTokensToMasterSkills:[],totalTokensPerSkill:[],totalTokensPerDay:[],progress:{student:[],tenant:[]},studentDurationsPerDay:[],studentSkillDurations:[],studentTokensPerSkills:[],studentAssessmentPasses:[],studentAssessmentAttempts:[],studentRootSubjectsFailedAssessments:[],studentRootSubjectsPassedAssessments:[],studentRootSubjectsAttemptedAssessments:[],cohortSkillActivities:[],cohortRootSubjectsFailedAssessments:[],cohortRootSubjectsPassedAssessments:[],cohortRootSubjectsAttemptedAssessments:[]}),actions:{async getStudentProgress(e,s){await fetch(`/student-analytics/student-progress/${s}/${e}`).then(t=>t.json()).then(t=>{for(let r=0;r<t.studentProgress.length;r++)t.studentProgress[r].date=new Date(t.studentProgress[r].date);t.studentProgress.sort((r,n)=>r.date-n.date),this.progress.student=t.studentProgress;for(let r=0;r<t.tenantAvgProgress.length;r++)t.tenantAvgProgress[r].date=new Date(t.tenantAvgProgress[r].date);t.tenantAvgProgress.sort((r,n)=>r.date-n.date),this.progress.tenant=t.tenantAvgProgress}).catch(t=>{console.error("Error fetching student progress:",t)})},async getStudentDurationPerDay(e){fetch(`/student-analytics/student-duration-per-day/${e}`).then(s=>s.json()).then(s=>{for(let t=0;t<s.length;t++)s[t].formattedQuantity=s[t].quantity/1e3,s[t].date=new Date(s[t].date);s.sort((t,r)=>t.date-r.date),this.studentDurationsPerDay=s}).catch(s=>{console.error("Error fetching student duration per day:",s)})},async getStudentSkillDurations(e){fetch(`/student-analytics/skill-durations/${e}`).then(s=>s.json()).then(s=>{this.studentSkillDurations=s;for(let t=0;t<this.studentSkillDurations.length;t++)this.studentSkillDurations[t].formattedQuantity=this.millisToMinutesAndSeconds(this.studentSkillDurations[t].quantity)}).catch(s=>{console.error("Error fetching last visited skills:",s)})},async getAvgTokensToMasterSkills(e){try{const s=await fetch(`/student-analytics/avg-tokens-to-master-skills/student/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const t=await s.json();this.studentTokensPerSkills=Array.isArray(t)?t:[]}catch(s){console.error("Error fetching cohort mastered assessments:",s),this.studentTokensPerSkills=[]}},async getStudentAssessmentPasses(e){const s=a();await s.getMasteredSkills(e),this.studentAssessmentPasses=s.masteredSkills.map(t=>({...t,url:`/skills/${t.url}`,labelName:`${t.name}`}))},async getStudentAssessmentAttempts(e){fetch(`/student-analytics/started-unmastered-assessments/${e}`).then(s=>s.json()).then(s=>{this.studentAssessmentAttempts=s.map(t=>({...t,url:`/skills/${t.url}`,labelName:`${t.name}`}))}).catch(s=>{console.error("Error fetching last visited skills:",s)})},async getStudentFailedAssessmentsBySubject(e){try{const s=await fetch(`/student-analytics/failed-assessments-by-subject/student/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsFailedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsFailedAssessments=[]}},async getStudentPassedAssessmentsBySubject(e){try{const s=await fetch(`/student-analytics/passed-assessments-by-subject/student/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsPassedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsPassedAssessments=[]}},async getStudentAttemptedAssessmentsBySubject(e){try{const s=await fetch(`/student-analytics/attempted-assessments-by-subject/student/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsAttemptedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsAttemptedAssessments=[]}},async getTeacherClassSkillActivityReport(e){try{const s=await fetch(`/student-analytics/all-student-cohort-activity/instructor/${e}`);if(!s.ok)throw new Error("Network response was not ok");this.cohortSkillActivities=await s.json(),this.cohortSkillActivities=this.cohortSkillActivities.map(t=>({...t,formattedQuantity:this.millisToMinutesAndSeconds(t.quantity)}))}catch(s){console.error("Error fetching skill activity report:",s)}},async getTeacherClassFailedAssessmentsBySubject(e){try{const s=await fetch(`/student-analytics/failed-assessments-by-subject/instructor/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsFailedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.cohortRootSubjectsFailedAssessments=[]}},async getTeacherClassPassedAssessmentsBySubject(e){try{const s=await fetch(`/student-analytics/passed-assessments-by-subject/instructor/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsPassedAssessments=await s.json()}catch(s){console.error("Error fetching cohort mastered assessments:",s),this.cohortRootSubjectsPassedAssessments=[]}},async getTeacherClassAttemptedAssessmentsBySubject(e){try{const s=await fetch(`/student-analytics/attempted-assessments-by-subject/instructor/${e}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsAttemptedAssessments=await s.json()}catch(s){console.error("Error fetching cohort attempted assessments:",s),this.cohortRootSubjectsAttemptedAssessments=[]}},millisToMinutesAndSeconds(e){var s=Math.floor(e/6e4),t=(e%6e4/1e3).toFixed(0);return s+":"+(t<10?"0":"")+t}}});export{c as u};
