import{x as o}from"./main-934589f8.js";const n=o("analytics",{state:()=>({durationPerDay:[],avgTimeOnSkills:[],percentageStudentsMasteredOneSkill:[],tenantProgress:[],numSkillsPassedPerNumStudents:[],passedAssessments:[],failedAssessments:[],rootSubjectsFailedAssessments:[],rootSubjectsPassedAssessments:[],rootSubjectsAttemptedAssessments:[],attemptedAssessments:[],avgTokensToMasterSkills:[],totalTokensPerSkill:[],totalTokensPerDay:[],studentRootSubjectsFailedAssessments:[],studentRootSubjectsPassedAssessments:[],studentRootSubjectsAttemptedAssessments:[],cohortSkillActivities:[],cohortRootSubjectsFailedAssessments:[],cohortRootSubjectsPassedAssessments:[],cohortRootSubjectsAttemptedAssessments:[]}),actions:{async getStudentFailedAssessmentsBySubject(t){try{const s=await fetch(`/student-analytics/failed-assessments-by-subject/student/${t}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsFailedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsFailedAssessments=[]}},async getStudentPassedAssessmentsBySubject(t){try{const s=await fetch(`/student-analytics/passed-assessments-by-subject/student/${t}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsPassedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsPassedAssessments=[]}},async getStudentAttemptedAssessmentsBySubject(t){try{const s=await fetch(`/student-analytics/attempted-assessments-by-subject/student/${t}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsAttemptedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsAttemptedAssessments=[]}},async getTeacherClassSkillActivityReport(t){try{const s=await fetch(`/student-analytics/all-student-cohort-activity/instructor/${t}`);if(!s.ok)throw new Error("Network response was not ok");this.cohortSkillActivities=await s.json(),this.cohortSkillActivities=this.cohortSkillActivities.map(e=>({...e,formattedQuantity:this.millisToMinutesAndSeconds(e.quantity)}))}catch(s){console.error("Error fetching skill activity report:",s)}},async getTeacherClassFailedAssessmentsBySubject(t){try{const s=await fetch(`/student-analytics/failed-assessments-by-subject/instructor/${t}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsFailedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.cohortRootSubjectsFailedAssessments=[]}},async getTeacherClassPassedAssessmentsBySubject(t){try{const s=await fetch(`/student-analytics/passed-assessments-by-subject/instructor/${t}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsPassedAssessments=await s.json()}catch(s){console.error("Error fetching cohort mastered assessments:",s),this.cohortRootSubjectsPassedAssessments=[]}},async getTeacherClassAttemptedAssessmentsBySubject(t){try{const s=await fetch(`/student-analytics/attempted-assessments-by-subject/instructor/${t}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsAttemptedAssessments=await s.json()}catch(s){console.error("Error fetching cohort attempted assessments:",s),this.cohortRootSubjectsAttemptedAssessments=[]}},millisToMinutesAndSeconds(t){var s=Math.floor(t/6e4),e=(t%6e4/1e3).toFixed(0);return s+":"+(e<10?"0":"")+e}}});export{n as u};
