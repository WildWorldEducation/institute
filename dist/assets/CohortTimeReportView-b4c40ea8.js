import{u as $}from"./CohortsStore-17b70a28.js";import{_ as f,o as u,c as m,f as T,r as y,a as p,t as P,k as D,b as v}from"./main-20d71ce8.js";import"./transform-23c7b39f.js";import{u as A,l as q}from"./line-551a0daf.js";import{e as M}from"./extent-4cf1c809.js";import{l as _,m as S,b as k,s as C}from"./linear-5b5f98b2.js";import{s as g}from"./select-03d56b88.js";import{h as B,b as x,a as w}from"./continuous-dd31f971.js";import"./time-d987a114.js";import"./init-77b53fdd.js";import"./array-4492e866.js";import"./point-e88f89db.js";import"./ascending-3ff63084.js";import"./ordinal-ba9b4969.js";const I={name:"CohortDurationPerDayLineChart",props:["data","colour"],data(){return{padding:60}},mounted(){const t=this.data;g("#cohort-duration-per-day-chart-container");const o=928,r=500,c=20,a=30,d=30,l=40,n=A(M(t,i=>i.date),[l,o-a]),s=_([0,S(t,i=>i.formattedQuantity)],[r-d,c]),h=q().x(i=>n(i.date)).y(i=>s(i.formattedQuantity)),e=g("#cohort-duration-per-day-chart-container").append("svg").attr("width",o).attr("height",r).attr("viewBox",[0,0,o,r]).attr("style","max-width: 100%; height: auto; height: intrinsic;");e.append("g").attr("transform",`translate(0,${r-d})`).call(B(n).ticks(t.length/2).tickSizeOuter(0)),e.append("g").attr("transform",`translate(${l},0)`).call(x(s).ticks(r/80)).call(i=>i.selectAll(".tick line").clone().attr("x2",o-l-a).attr("stroke-opacity",.1)).call(i=>i.append("text").attr("x",-l).attr("y",10).attr("fill","currentColor").attr("text-anchor","start").text("â†‘ Duration in seconds")),e.append("path").attr("fill","none").attr("stroke","#5f31dd").attr("stroke-width",1.5).attr("d",h(t))}},b={id:"cohort-duration-per-day-chart-container"};function Q(t,o,r,c,a,d){return u(),m("div",b)}const j=f(I,[["render",Q]]),z={name:"CohortCompareDurationHorizontalChart",props:["data","colour"],data(){return{padding:60}},mounted(){g("#cohort-compare-duration-chart-container");const t=25,o=0,r=0,c=10,a=200,d=1e3,l=Math.ceil((this.data.length+.1)*t)+o+c,n=_().domain([0,S(this.data,e=>e.quantity)]).range([a,d-r]),s=k().domain(C(this.data,e=>-e.quantity).map(e=>e.name)).rangeRound([o,l-c]).padding(.1);n.tickFormat(20);const h=g("#cohort-compare-duration-chart-container").append("svg").attr("width",d).attr("height",l).attr("viewBox",[0,0,d,l]).attr("style","max-width: 100%; height: 100%; font: 14px sans-serif;");h.append("g").attr("fill",this.colour).selectAll().data(this.data).join("rect").attr("x",n(0)).attr("y",e=>s(e.name)).attr("width",e=>n(e.quantity)-n(0)).attr("height",s.bandwidth()),h.append("g").attr("fill","white").attr("text-anchor","end").selectAll().data(this.data).join("text").attr("x",e=>n(e.quantity)).attr("y",e=>s(e.name)+s.bandwidth()/2).attr("dy","0.35em").attr("dx",-4).text(e=>e.formattedQuantity).call(e=>e.filter(i=>n(i.quantity)-n(0)<20).attr("dx",4).attr("fill","black").attr("text-anchor","start")),h.append("g").attr("transform",`translate(0,${o})`).call(w(n).ticks(0)).call(e=>e.select(".domain").remove()),h.append("g").attr("transform",`translate(${a},0)`).call(x(s).tickSizeOuter(0))}},N={id:"cohort-compare-duration-chart-container"};function E(t,o,r,c,a,d){return u(),m("div",N)}const H=f(z,[["render",E]]),L={name:"CohortDurationPerSkillHorizontalBarChart",props:["data","colour"],data(){return{padding:60}},mounted(){g("#cohort-duration-per-skill-chart-container");const t=25,o=0,r=0,c=10,a=200,d=1e3,l=Math.ceil((this.data.length+.1)*t)+o+c,n=_().domain([0,S(this.data,e=>e.quantity)]).range([a,d-r]),s=k().domain(C(this.data,e=>-e.quantity).map(e=>e.name)).rangeRound([o,l-c]).padding(.1);n.tickFormat(20);const h=g("#cohort-duration-per-skill-chart-container").append("svg").attr("width",d).attr("height",l).attr("viewBox",[0,0,d,l]).attr("style","max-width: 100%; height: 100%; font: 14px sans-serif;");h.append("g").attr("fill",this.colour).selectAll().data(this.data).join("rect").attr("x",n(0)).attr("y",e=>s(e.name)).attr("width",e=>n(e.quantity)-n(0)).attr("height",s.bandwidth()),h.append("g").attr("fill","white").attr("text-anchor","end").selectAll().data(this.data).join("text").attr("x",e=>n(e.quantity)).attr("y",e=>s(e.name)+s.bandwidth()/2).attr("dy","0.35em").attr("dx",-4).text(e=>e.formattedQuantity).call(e=>e.filter(i=>n(i.quantity)-n(0)<40).attr("dx",4).attr("fill","black").attr("text-anchor","start")),h.append("g").attr("transform",`translate(0,${o})`).call(w(n).ticks(0)).call(e=>e.select(".domain").remove()),h.append("g").attr("transform",`translate(${a},0)`).call(x(s).tickSizeOuter(0))},computed:{}},R={id:"cohort-duration-per-skill-chart-container"};function O(t,o,r,c,a,d){return u(),m("div",R)}const F=f(L,[["render",O]]),V={setup(){const t=$(),o=T();return{cohortsStore:t,userDetailsStore:o}},components:{CohortDurationPerDayLineChart:j,CohortCompareDurationHorizontalChart:H,CohortDurationPerSkillHorizontalBarChart:F},data(){return{cohortId:this.$route.params.cohortId,cohortName:"",durationsPerDay:[],studentTotalDurations:[],studentDurationsPerSkill:[]}},async created(){this.cohortsStore.cohorts.length<1&&await this.cohortsStore.getCohorts(this.userDetailsStore.userId);const t=this.cohortsStore.cohorts.find(o=>o.id==this.cohortId);t&&(this.cohortName=t.name),this.cohortId!="all-students"?(await this.getCohortDurationPerDay(),await this.getCohortStudentTotalDurations(),await this.getCohortDurationsPerSkill()):(await this.getAllStudentsDurationPerDay(),await this.getAllStudentsStudentTotalDurations(),await this.getAllStudentsDurationsPerSkill())},methods:{async getCohortDurationPerDay(){fetch(`/student-analytics/cohort-duration-per-day/${this.cohortId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].formattedQuantity=this.millisToMinutesAndSeconds(t[o].quantity),t[o].formattedQuantity=this.convertMinutesSecondsToSeconds(t[o].formattedQuantity),t[o].date=new Date(t[o].date);t.sort((o,r)=>o.date-r.date),this.durationsPerDay=t}).catch(t=>{console.error("Error fetching student duration per day:",t)})},async getAllStudentsDurationPerDay(){fetch(`/student-analytics/all-students-duration-per-day/${this.userDetailsStore.userId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].formattedQuantity=this.millisToMinutesAndSeconds(t[o].quantity),t[o].formattedQuantity=this.convertMinutesSecondsToSeconds(t[o].formattedQuantity),t[o].date=new Date(t[o].date);t.sort((o,r)=>o.date-r.date),this.durationsPerDay=t}).catch(t=>{console.error("Error fetching student duration per day:",t)})},async getCohortStudentTotalDurations(){fetch(`/student-analytics/cohort-total-durations/${this.cohortId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].formattedQuantity=this.millisToMinutesAndSeconds(t[o].quantity),t[o].date=new Date(t[o].date);t.sort((o,r)=>o.date-r.date),this.studentTotalDurations=t}).catch(t=>{console.error("Error fetching student duration per day:",t)})},async getAllStudentsStudentTotalDurations(){fetch(`/student-analytics/all-students-total-durations/${this.userDetailsStore.userId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].formattedQuantity=this.millisToMinutesAndSeconds(t[o].quantity),t[o].date=new Date(t[o].date);t.sort((o,r)=>o.date-r.date),this.studentTotalDurations=t}).catch(t=>{console.error("Error fetching student duration per day:",t)})},async getCohortDurationsPerSkill(){fetch(`/student-analytics/cohort-student-durations-per-skill/${this.cohortId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].formattedQuantity=this.millisToMinutesAndSeconds(t[o].quantity);this.studentDurationsPerSkill=t}).catch(t=>{console.error("Error fetching student durations per skill:",t)})},async getAllStudentsDurationsPerSkill(){fetch(`/student-analytics/all-students-student-durations-per-skill/${this.userDetailsStore.userId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].formattedQuantity=this.millisToMinutesAndSeconds(t[o].quantity);this.studentDurationsPerSkill=t}).catch(t=>{console.error("Error fetching student durations per skill:",t)})},millisToMinutesAndSeconds(t){var o=Math.floor(t/6e4),r=(t%6e4/1e3).toFixed(0);return o+":"+(r<10?"0":"")+r},convertMinutesSecondsToSeconds(t){const o=t.split(":");if(o.length!==2)throw new Error("Invalid duration format. Expected 'MM:SS'.");const r=parseInt(o[0],10),c=parseInt(o[1],10);if(isNaN(r)||isNaN(c))throw new Error("Invalid numerical values in duration string.");return r*60+c}}},U={class:"container"},G={class:"d-flex justify-content-between w-100"},J=p("h1",{class:"heading"},"Time Report",-1),K={class:"secondary-heading h3"},W=p("h2",{class:"secondary-heading"},"Total time on platform per day",-1),X={key:1},Y=p("h2",{class:"secondary-heading mt-4"}," Total time on platform, comparing students ",-1),Z={key:3},tt=p("h2",{class:"secondary-heading mt-4"},"Minutes per skill",-1);function ot(t,o,r,c,a,d){const l=y("CohortDurationPerDayLineChart"),n=y("CohortCompareDurationHorizontalChart"),s=y("CohortDurationPerSkillHorizontalBarChart");return u(),m("div",U,[p("span",G,[J,p("h2",K,P(a.cohortName),1)]),W,a.durationsPerDay.length>0?(u(),D(l,{key:0,data:a.durationsPerDay},null,8,["data"])):(u(),m("p",X,"No time recorded yet")),Y,a.studentTotalDurations.length>0?(u(),D(n,{key:2,data:a.studentTotalDurations,colour:"#5f31dd"},null,8,["data"])):(u(),m("p",Z,"No time recorded yet")),tt,a.studentDurationsPerSkill.length>0?(u(),D(s,{key:4,data:a.studentDurationsPerSkill,colour:"#5f31dd"},null,8,["data"])):v("",!0)])}const ft=f(V,[["render",ot]]);export{ft as default};
