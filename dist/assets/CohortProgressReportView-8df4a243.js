import{u as _}from"./CohortsStore-eacd74a6.js";import{_ as u,o as c,c as l,f as x,r as y,a as d,t as C,k as P}from"./main-d4af69a9.js";import{s as m}from"./transform-61954928.js";import{u as k,l as w}from"./line-925d7bdd.js";import{e as S}from"./extent-4cf1c809.js";import{l as $,m as B}from"./linear-279a0da9.js";import{a as D,b as I}from"./continuous-f92add0b.js";import"./time-a3d74c60.js";import"./init-77b53fdd.js";import"./array-4492e866.js";import"./point-e88f89db.js";import"./ascending-3ff63084.js";const v={name:"CohortProgressLineChart",props:["data","colour"],data(){},mounted(){const t=this.data;m("#cohort-progress-line-chart-container");const o=928,r=500,i=20,s=30,n=30,a=40,p=k(S(t,e=>e.date),[a,o-s]),g=$([0,B(t,e=>e.quantity)],[r-n,i]),f=w().x(e=>p(e.date)).y(e=>g(e.quantity)),h=m("#cohort-progress-line-chart-container").append("svg").attr("width",o).attr("height",r).attr("viewBox",[0,0,o,r]).attr("style","max-width: 100%; height: auto; height: intrinsic;");h.append("g").attr("transform",`translate(0,${r-n})`).call(D(p).ticks(t.length/2).tickSizeOuter(0)),h.append("g").attr("transform",`translate(${a},0)`).call(I(g).ticks(r/80)).call(e=>e.selectAll(".tick line").clone().attr("x2",o-a-s).attr("stroke-opacity",.1)).call(e=>e.append("text").attr("x",-a).attr("y",10).attr("fill","currentColor").attr("text-anchor","start").text("â†‘ Skills mastered")),h.append("path").attr("fill","none").attr("stroke",this.colour).attr("stroke-width",1.5).attr("d",f(t))}},L={id:"cohort-progress-line-chart-container"};function j(t,o,r,i,s,n){return c(),l("div",L)}const N=u(v,[["render",j]]),b={setup(){const t=_(),o=x();return{cohortsStore:t,userDetailsStore:o}},components:{CohortProgressLineChart:N},data(){return{cohortId:this.$route.params.cohortId,cohortName:"",cohortProgress:[]}},async created(){this.cohortsStore.cohorts.length<1&&await this.cohortsStore.getCohorts(this.userDetailsStore.userId);const t=this.cohortsStore.cohorts.find(o=>o.id==this.cohortId);t&&(this.cohortName=t.name),this.cohortId!="all-students"?await this.getCohortProgress():await this.getAllStudentsProgress()},methods:{async getCohortProgress(){fetch(`/student-analytics/cohort-progress/${this.cohortId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].date=new Date(t[o].date);t.sort((o,r)=>o.date-r.date),this.cohortProgress=t}).catch(t=>{console.error("Error fetching student progress:",t)})},async getAllStudentsProgress(){fetch(`/student-analytics/all-students-progress/${this.userDetailsStore.userId}`).then(t=>t.json()).then(t=>{for(let o=0;o<t.length;o++)t[o].date=new Date(t[o].date);t.sort((o,r)=>o.date-r.date),this.cohortProgress=t}).catch(t=>{console.error("Error fetching student progress:",t)})}}},A={class:"container"},E={class:"d-flex justify-content-between w-100"},R=d("h1",{class:"heading"},"Progress Report",-1),T={class:"secondary-heading h3"},q={key:1};function O(t,o,r,i,s,n){const a=y("CohortProgressLineChart");return c(),l("div",A,[d("span",E,[R,d("h2",T,C(s.cohortName),1)]),s.cohortProgress.length>0?(c(),P(a,{key:0,data:s.cohortProgress,colour:"#5f31dd"},null,8,["data"])):(c(),l("p",q,"There is no data to show yet."))])}const Y=u(b,[["render",O]]);export{Y as default};
