import{u as H}from"./CohortsStore-339199a9.js";import{_ as w,o as m,c as k,e as b,r as f,a as l,t as B,k as A,b as y}from"./main-d0bd4343.js";import{s as u}from"./transform-62bed377.js";import{l as x,m as S,f as C,b as _}from"./linear-c1216a03.js";import{b as $}from"./band-22321830.js";import{s as Q}from"./sort-a49d696f.js";import{F as T}from"./FailedAssessmentsHorizontalBarChart-34ede504.js";import"./ordinal-3694ef9e.js";const j={name:"CohortPassedAssessmentsHorizontalBarChart",props:["data","colour"],data(){return{padding:60}},mounted(){u("#cohort-passed-assessments-chart-container");const t=25,s=0,h=0,c=10,r=200,n=1e3,i=Math.ceil((this.data.length+.1)*t)+s+c,a=x().domain([0,S(this.data,e=>e.quantity)]).range([r,n-h]),o=$().domain(Q(this.data,e=>-e.quantity).map(e=>e.name)).rangeRound([s,i-c]).padding(.1),p=a.tickFormat(20),d=u("#cohort-passed-assessments-chart-container").append("svg").attr("width",n).attr("height",i).attr("viewBox",[0,0,n,i]).attr("style","max-width: 100%; height: 100%; font: 14px sans-serif;");d.append("g").attr("fill",this.colour).selectAll().data(this.data).join("rect").attr("x",a(0)).attr("y",e=>o(e.name)).attr("width",e=>a(e.quantity)-a(0)).attr("height",o.bandwidth()),d.append("g").attr("fill","white").attr("text-anchor","end").selectAll().data(this.data).join("text").attr("x",e=>a(e.quantity)).attr("y",e=>o(e.name)+o.bandwidth()/2).attr("dy","0.35em").attr("dx",-4).text(e=>p(e.quantity)).call(e=>e.filter(g=>a(g.quantity)-a(0)<20).attr("dx",4).attr("fill","black").attr("text-anchor","start")),d.append("g").attr("transform",`translate(0,${s})`).call(C(a).ticks(0)).call(e=>e.select(".domain").remove()),d.append("g").attr("transform",`translate(${r},0)`).call(_(o).tickSizeOuter(0))},computed:{}},z={id:"cohort-passed-assessments-chart-container"};function E(t,s,h,c,r,n){return m(),k("div",z)}const q=w(j,[["render",E]]),v={name:"CohortAttemptedAssessmentsHorizontalBarChart",props:["data","colour"],data(){return{padding:60}},mounted(){u("#cohort-attempted-assessments-chart-container");const t=25,s=0,h=0,c=10,r=200,n=1e3,i=Math.ceil((this.data.length+.1)*t)+s+c,a=x().domain([0,S(this.data,e=>e.quantity)]).range([r,n-h]),o=$().domain(Q(this.data,e=>-e.quantity).map(e=>e.name)).rangeRound([s,i-c]).padding(.1),p=a.tickFormat(20),d=u("#cohort-attempted-assessments-chart-container").append("svg").attr("width",n).attr("height",i).attr("viewBox",[0,0,n,i]).attr("style","max-width: 100%; height: 100%; font: 14px sans-serif;");d.append("g").attr("fill",this.colour).selectAll().data(this.data).join("rect").attr("x",a(0)).attr("y",e=>o(e.name)).attr("width",e=>a(e.quantity)-a(0)).attr("height",o.bandwidth()),d.append("g").attr("fill","white").attr("text-anchor","end").selectAll().data(this.data).join("text").attr("x",e=>a(e.quantity)).attr("y",e=>o(e.name)+o.bandwidth()/2).attr("dy","0.35em").attr("dx",-4).text(e=>p(e.quantity)).call(e=>e.filter(g=>a(g.quantity)-a(0)<20).attr("dx",4).attr("fill","black").attr("text-anchor","start")),d.append("g").attr("transform",`translate(0,${s})`).call(C(a).ticks(0)).call(e=>e.select(".domain").remove()),d.append("g").attr("transform",`translate(${r},0)`).call(_(o).tickSizeOuter(0))},computed:{}},D={id:"cohort-attempted-assessments-chart-container"};function F(t,s,h,c,r,n){return m(),k("div",D)}const I=w(v,[["render",F]]),P={setup(){const t=H(),s=b();return{cohortsStore:t,userDetailsStore:s}},components:{CohortPassedAssessmentsHorizontalBarChart:q,CohortAttemptedAssessmentsHorizontalChart:I,FailedAssessmentsHorizontalBarChart:T},data(){return{cohortId:this.$route.params.cohortId,cohortName:"",masteredSkillQuantities:[],failedAssessmentQuantities:[],attemptedAssessmentQuantities:[]}},async created(){if(this.cohortId!="all-students"){this.getCohortMasteredAssessments(),this.getCohortAttemptedAssessments(),this.getCohortFailedAssessments(),this.cohortsStore.cohorts.length<1&&await this.cohortsStore.getCohorts(this.userDetailsStore.userId);const t=this.cohortsStore.cohorts.find(s=>s.id==this.cohortId);t&&(this.cohortName=t.name)}else this.getAllStudentsMasteredAssessments(),this.getAllStudentsAttemptedAssessments(),this.getAllStudentsFailedAssessments()},methods:{async getCohortMasteredAssessments(){try{const t=await fetch(`/student-analytics/mastered-skills/cohort/${this.cohortId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.masteredSkillQuantities=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.masteredSkillQuantities=[]}},async getAllStudentsMasteredAssessments(){try{const t=await fetch(`/student-analytics/mastered-skills/all-students/${this.userDetailsStore.userId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.masteredSkillQuantities=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching all students mastered assessments:",t),this.masteredSkillQuantities=[]}},async getCohortAttemptedAssessments(){try{const t=await fetch(`/student-analytics/attempted-assessments/cohort/${this.cohortId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.attemptedAssessmentQuantities=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.attemptedAssessmentQuantities=[]}},async getAllStudentsAttemptedAssessments(){try{const t=await fetch(`/student-analytics/attempted-assessments/all-students/${this.userDetailsStore.userId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.attemptedAssessmentQuantities=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching cohort mastered assessments:",t),this.attemptedAssessmentQuantities=[]}},async getCohortFailedAssessments(){try{const t=await fetch(`/student-analytics/failed-assessments/cohort/${this.cohortId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.failedAssessmentQuantities=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching cohort failed assessments:",t),this.failedAssessmentQuantities=[]}},async getAllStudentsFailedAssessments(){try{const t=await fetch(`/student-analytics/failed-assessments/all-students/${this.userDetailsStore.userId}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.json();this.failedAssessmentQuantities=Array.isArray(s)?s:[]}catch(t){console.error("Error fetching all students failed assessments:",t),this.failedAssessmentQuantities=[]}},assessmentDate(t){return new Date(t).toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}}},M={class:"container"},R={class:"d-flex justify-content-between w-100"},N={class:"secondary-heading h3"};function L(t,s,h,c,r,n){const i=f("CohortPassedAssessmentsHorizontalBarChart"),a=f("CohortAttemptedAssessmentsHorizontalChart"),o=f("FailedAssessmentsHorizontalBarChart");return m(),k("div",M,[l("span",R,[s[0]||(s[0]=l("h1",{class:"heading"},"Assessment Status Report",-1)),l("h2",N,B(r.cohortName),1)]),s[1]||(s[1]=l("h4",{class:"secondary-heading"},"Passed",-1)),r.masteredSkillQuantities.length>0?(m(),A(i,{key:0,data:r.masteredSkillQuantities,colour:"darkgreen",class:"mb-4"},null,8,["data"])):y("",!0),s[2]||(s[2]=l("h4",{class:"secondary-heading"},"Attempted",-1)),r.attemptedAssessmentQuantities.length>0?(m(),A(a,{key:1,data:r.attemptedAssessmentQuantities,colour:"darkblue",class:"mb-4"},null,8,["data"])):y("",!0),s[3]||(s[3]=l("h4",{class:"secondary-heading"},"Failed multiple times",-1)),r.failedAssessmentQuantities.length>0?(m(),A(o,{key:2,data:r.failedAssessmentQuantities,colour:"darkred"},null,8,["data"])):y("",!0)])}const Y=w(P,[["render",L]]);export{Y as default};
