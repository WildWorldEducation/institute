import{x as o,K as a}from"./main-3dc5ce00.js";const c=o("analytics",{state:()=>({durationPerDay:[],avgTimeOnSkills:[],percentageStudentsMasteredOneSkill:[],tenantProgress:[],numSkillsPassedPerNumStudents:[],passedAssessments:[],failedAssessments:[],rootSubjectsFailedAssessments:[],rootSubjectsPassedAssessments:[],rootSubjectsAttemptedAssessments:[],attemptedAssessments:[],avgTokensToMasterSkills:[],totalTokensPerSkill:[],totalTokensPerDay:[],progress:{student:[],class:[],tenant:[]},time:{student:[],class:[],tenant:[]},cost:{student:[],class:[],tenant:[]},studentDurationsPerDay:[],studentSkillDurations:[],studentTokensPerSkills:[],studentAssessmentPasses:[],studentAssessmentAttempts:[],studentRootSubjectsFailedAssessments:[],studentRootSubjectsPassedAssessments:[],studentRootSubjectsAttemptedAssessments:[],classProgress:[],cohortSkillActivities:[],cohortRootSubjectsFailedAssessments:[],cohortRootSubjectsPassedAssessments:[],cohortRootSubjectsAttemptedAssessments:[]}),actions:{async getStudentProgress(n,s){await fetch(`/student-analytics/student-progress/${s}/${n}`).then(t=>t.json()).then(t=>{for(let e=0;e<t.studentProgress.length;e++)t.studentProgress[e].date=new Date(t.studentProgress[e].date);t.studentProgress.sort((e,r)=>e.date-r.date),this.progress.student=t.studentProgress;for(let e=0;e<t.tenantAvgProgress.length;e++)t.tenantAvgProgress[e].date=new Date(t.tenantAvgProgress[e].date);t.tenantAvgProgress.sort((e,r)=>e.date-r.date),this.progress.tenant=t.tenantAvgProgress}).catch(t=>{console.error("Error fetching student progress:",t)})},async getStudentTime(n,s){await fetch(`/student-analytics/student-duration-per-day/${n}/${s}`).then(t=>t.json()).then(t=>{for(let e=0;e<t.studentTime.length;e++)t.studentTime[e].formattedQuantity=t.studentTime[e].quantity/(1e3*60),t.studentTime[e].date=new Date(t.studentTime[e].date);t.studentTime.sort((e,r)=>e.date-r.date),this.time.student=t.studentTime;for(let e=0;e<t.averageTime.length;e++)t.averageTime[e].formattedQuantity=t.averageTime[e].quantity/(1e3*60),t.averageTime[e].date=new Date(t.averageTime[e].date);t.averageTime.sort((e,r)=>e.date-r.date),this.time.tenant=t.averageTime}).catch(t=>{console.error("Error fetching student duration per day:",t)})},async getStudentDurationPerDay(n){fetch(`/student-analytics/student-duration-per-day/${n}}`).then(s=>s.json()).then(s=>{for(let t=0;t<s.length;t++)s[t].formattedQuantity=s[t].quantity/1e3,s[t].date=new Date(s[t].date);s.sort((t,e)=>t.date-e.date),this.studentDurationsPerDay=s}).catch(s=>{console.error("Error fetching student duration per day:",s)})},async getStudentSkillDurations(n){fetch(`/student-analytics/skill-durations/${n}`).then(s=>s.json()).then(s=>{this.studentSkillDurations=s;for(let t=0;t<this.studentSkillDurations.length;t++)this.studentSkillDurations[t].formattedQuantity=this.millisToMinutesAndSeconds(this.studentSkillDurations[t].quantity)}).catch(s=>{console.error("Error fetching last visited skills:",s)})},async getAvgTokensToMasterSkills(n){try{const s=await fetch(`/student-analytics/avg-tokens-to-master-skills/student/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const t=await s.json();this.studentTokensPerSkills=Array.isArray(t)?t:[]}catch(s){console.error("Error fetching cohort mastered assessments:",s),this.studentTokensPerSkills=[]}},async getStudentAssessmentPasses(n){const s=a();await s.getMasteredSkills(n),this.studentAssessmentPasses=s.masteredSkills.map(t=>({...t,url:`/skills/${t.url}`,labelName:`${t.name}`}))},async getStudentAssessmentAttempts(n){fetch(`/student-analytics/started-unmastered-assessments/${n}`).then(s=>s.json()).then(s=>{this.studentAssessmentAttempts=s.map(t=>({...t,url:`/skills/${t.url}`,labelName:`${t.name}`}))}).catch(s=>{console.error("Error fetching last visited skills:",s)})},async getStudentFailedAssessmentsBySubject(n){try{const s=await fetch(`/student-analytics/failed-assessments-by-subject/student/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsFailedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsFailedAssessments=[]}},async getStudentPassedAssessmentsBySubject(n){try{const s=await fetch(`/student-analytics/passed-assessments-by-subject/student/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsPassedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsPassedAssessments=[]}},async getStudentAttemptedAssessmentsBySubject(n){try{const s=await fetch(`/student-analytics/attempted-assessments-by-subject/student/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.studentRootSubjectsAttemptedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.studentRootSubjectsAttemptedAssessments=[]}},async getClassProgress(n,s){await fetch(`/student-analytics/all-students-progress/${n}/${s}`).then(t=>t.json()).then(t=>{for(let e=0;e<t.length;e++)t[e].date=new Date(t[e].date);t.sort((e,r)=>e.date-r.date),this.progress.class=t}).catch(t=>{console.error("Error fetching student progress:",t)})},async getClassTime(n){await fetch(`/student-analytics/all-students-duration-per-day/weekly/${n}`).then(s=>s.json()).then(s=>{for(let t=0;t<s.length;t++)s[t].date=new Date(s[t].date),s[t].minutes=s[t].quantity/(1e3*60);s.sort((t,e)=>t.date-e.date),this.time.class=s}).catch(s=>{console.error("Error fetching student progress:",s)})},async getClassCost(n,s){await fetch(`/student-analytics/all-students-tokens-per-day/${s}/${n}`).then(t=>t.json()).then(t=>{for(let e=0;e<t.length;e++)t[e].date=new Date(t[e].date),t[e].minutes=t[e].quantity/(1e3*60);t.sort((e,r)=>e.date-r.date),this.cost.class=t}).catch(t=>{console.error("Error fetching student progress:",t)})},async getTeacherClassSkillActivityReport(n){try{const s=await fetch(`/student-analytics/all-student-cohort-activity/instructor/${n}`);if(!s.ok)throw new Error("Network response was not ok");this.cohortSkillActivities=await s.json(),this.cohortSkillActivities=this.cohortSkillActivities.map(t=>({...t,formattedQuantity:this.millisToMinutesAndSeconds(t.quantity)}))}catch(s){console.error("Error fetching skill activity report:",s)}},async getTeacherClassFailedAssessmentsBySubject(n){try{const s=await fetch(`/student-analytics/failed-assessments-by-subject/instructor/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsFailedAssessments=await s.json()}catch(s){console.error("Error fetching student mastered assessments:",s),this.cohortRootSubjectsFailedAssessments=[]}},async getTeacherClassPassedAssessmentsBySubject(n){try{const s=await fetch(`/student-analytics/passed-assessments-by-subject/instructor/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsPassedAssessments=await s.json()}catch(s){console.error("Error fetching cohort mastered assessments:",s),this.cohortRootSubjectsPassedAssessments=[]}},async getTeacherClassAttemptedAssessmentsBySubject(n){try{const s=await fetch(`/student-analytics/attempted-assessments-by-subject/instructor/${n}`);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);this.cohortRootSubjectsAttemptedAssessments=await s.json()}catch(s){console.error("Error fetching cohort attempted assessments:",s),this.cohortRootSubjectsAttemptedAssessments=[]}},async getSchoolProgress(n){await fetch(`/student-analytics/school-progress/${n}`).then(s=>s.json()).then(s=>{for(let t=0;t<s.length;t++)s[t].date=new Date(s[t].date);s.sort((t,e)=>t.date-e.date),this.progress.tenant=s}).catch(s=>{console.error("Error fetching student progress:",s)})},async getSchoolTime(n){await fetch(`/student-analytics/tenant-duration-per-day/weekly/${n}`).then(s=>s.json()).then(s=>{for(let t=0;t<s.length;t++)s[t].date=new Date(s[t].date),s[t].minutes=s[t].quantity/(1e3*60);s.sort((t,e)=>t.date-e.date),this.time.tenant=s}).catch(s=>{console.error("Error fetching student progress:",s)})},async getSchoolCost(n,s){await fetch(`/student-analytics/tenant-tokens-per-day/${s}/${n}}`).then(t=>t.json()).then(t=>{for(let e=0;e<t.length;e++)t[e].date=new Date(t[e].date),t[e].minutes=t[e].quantity/(1e3*60);t.sort((e,r)=>e.date-r.date),this.cost.tenant=t}).catch(t=>{console.error("Error fetching student progress:",t)})},millisToMinutesAndSeconds(n){var s=Math.floor(n/6e4),t=(n%6e4/1e3).toFixed(0);return s+":"+(t<10?"0":"")+t}}});export{c as u};
